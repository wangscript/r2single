[
	version(1.34),
	uuid(30000000-0000-0313-0000-000000000010),
	helpstring("R2Single API 1.34 Type Library")
]
library R2SAPILib
{
//	importlib("stdole32.tlb");
//	importlib("stdole2.tlb");

	module R2SAPIConstants
	{
		const LPSTR STR_ERROR = "^ERROR";

		const long  cpINVALID = -1;
		const long  cpUTF8 = 1;
		const long  cpUTF16 = 2;
		const long  cpUTF16LE = 2;
		const long  cpUTF16BE = 3;
		const long  cpUTF32 = 4;
		const long  cpUTF32LE = 4;
		const long  cpUTF32BE = 5;
		const long  cpGB18030 = 0x100;

		const long  Z_OK = 0;
		const long  Z_STREAM_ERROR = -2;
		const long  Z_DATA_ERROR = -3;
		const long  Z_MEM_ERROR = -4;
		const long  Z_BUF_ERROR = -5;

		const long  Z_NO_COMPRESSION = 0;
		const long  Z_BEST_SPEED = 1;
		const long  Z_BEST_COMPRESSION = 9;
		const long  Z_DEFAULT_COMPRESSION = -1;
	};

	[
		dllname("r2sapi.dll"),
		helpstring("R2Single API 1.34 Type Library")
	]
	module R2SAPIExports
	{
		[entry("_")]
			long __stdcall R2SAPIVer();
////	UTF.c
		[entry("cpConvertEncoding")]
			long __stdcall cpConvertEncoding([in]long TrCode, [in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("cpTrCodeSupported")]
			long __stdcall cpTrCodeSupported([in]long TrCode);
		[entry("UTF8ToUTF16")]
			long __stdcall UTF8ToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF8ToUTF32")]
			long __stdcall UTF8ToUTF32([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF8")]
			long __stdcall UTF16ToUTF8([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF16BE")]
			long __stdcall UTF16ToUTF16BE([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF32")]
			long __stdcall UTF16ToUTF32([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF32BE")]
			long __stdcall UTF16ToUTF32BE([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16BEToUTF16")]
			long __stdcall UTF16BEToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF8")]
			long __stdcall UTF32ToUTF8([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF16")]
			long __stdcall UTF32ToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF32BE")]
			long __stdcall UTF32ToUTF32BE([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF32BEToUTF16")]
			long __stdcall UTF32BEToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32BEToUTF32")]
			long __stdcall UTF32BEToUTF32([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
////	libeay32模块
		[entry("MD5")]
			long __stdcall MD5([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA1")]
			long __stdcall SHA1([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
//		[entry("SHA224")]
//			long __stdcall SHA224([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA256")]
			long __stdcall SHA256([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
//		[entry("SHA384")]
//			long __stdcall SHA384([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512")]
			long __stdcall SHA512([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
////	westpak模块
		[entry("GetFileFromPakA")]
			long __stdcall GetFileFromPak([in,out]void* pBuf, [in]long ulBufLen, [in,string]LPCSTR pszFn, [in,string]LPCSTR pszFnWant);
////	xmlparser模块
		[entry("XMLPickAttribW")]
			long __stdcall XMLPickAttribW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickAttribPosW")]
			long __stdcall XMLPickAttribPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickFullTagW")]
			long __stdcall XMLPickFullTagW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickFullTagPosW")]
			long __stdcall XMLPickFullTagPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickTagW")]
			long __stdcall XMLPickTagW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos);
		[entry("XMLPickTag2W")]
			long __stdcall XMLPickTag2W([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickTagPosW")]
			long __stdcall XMLPickTagPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
////	zlib模块
		[entry("compress")]
			long __stdcall Compress([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen);
		[entry("compress2")]
			long __stdcall Compress2([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen, [in]long Level);
		[entry("compressBound")]
			long __stdcall CompressBound([in]long lSrcLen);
		[entry("crc32")]
			long __stdcall CRC32([in]long CRC, [in]void* pBuf, [in]long lBufLen);
		[entry("uncompress")]
			long __stdcall Uncompress([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen);

	};

};
