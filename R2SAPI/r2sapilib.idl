[
	version(1.36),
	uuid(30000000-0000-0313-0000-000000000010),
	helpstring("R2Single API 1.36 Type Library")
]
library R2SAPILib
{
//	importlib("stdole32.tlb");
//	importlib("stdole2.tlb");

	[
		helpstring("R2Single API Constants")
	]
	module R2SAPIConstants
	{
		const LPSTR STR_ERROR = "^ERROR";
		const long  XML_ERR_OK = 0;
		const long  XML_ERR_NOTFOUND = -1;
		const long  XML_ERR_BUFFER = -2;
		const long  XML_ERR_INVALID_PARAM = -3;

		const long  Z_OK = 0;
		const long  Z_STREAM_ERROR = -2;
		const long  Z_DATA_ERROR = -3;
		const long  Z_MEM_ERROR = -4;
		const long  Z_BUF_ERROR = -5;
		const long  Z_NO_COMPRESSION = 0;
		const long  Z_BEST_SPEED = 1;
		const long  Z_BEST_COMPRESSION = 9;
		const long  Z_DEFAULT_COMPRESSION = -1;

		const long  cpINVALID = -1;
		const long  cpUTF8 = 1;
		const long  cpUTF16 = 2;
		const long  cpUTF16LE = 2;
		const long  cpUTF16BE = 3;
		const long  cpUTF32 = 4;
		const long  cpUTF32LE = 4;
		const long  cpUTF32BE = 5;
		const long  cpUTFEBCDIC = 0x40;
		const long  cpUTF1 = 0x41;
		const long  cpCESU8 = 0x80;
		const long  cpUTF7 = 0xa0;
		const long  cpGB18030 = 0x100;
	};

	typedef struct BLAKE2S_CTX
	{
		unsigned char UBuf[240];
		long Buf;
		long H, T, F;
		long BufLen;
		unsigned char Last_Node;
	} BLAKE2S_CTX;
	typedef struct BLAKE2SP_CTX
	{
		BLAKE2S_CTX S[8];
		BLAKE2S_CTX R;
		unsigned char Buf[512];
		long BufLen;
	} BLAKE2SP_CTX;
	typedef struct MD2_CTX
	{
		long Num;
		unsigned char Data[16];
		long Cksm[16];
		long State[16];
	} MD2_CTX;
	typedef struct MD4_CTX
	{
		long A, B, C, D;
		long NL, NH;
		long Data[16];
		long Num;
	} MD4_CTX;
	typedef struct MD5_CTX
	{
		long A, B, C, D;
		long NL, NH;
		long Data[16];
		long Num;
	} MD5_CTX;
	typedef struct MD6_CTX
	{
		long D;
		long HashBitLen;
		unsigned char HashVal[128];
		unsigned char HexHashVal[129];
		long Initialized;
		long Bits_Processed[2];
		long Compression_Calls[2];
		long Finalized;
		long K[8][2];
		long KeyLen;
		long L;
		long R;
		long Top;
		long B[29][64][2];
		long Bits[29];
		long I_For_Level[29][2];
	} MD6_CTX;
	typedef unsigned char DES_cblock[8];
	typedef struct MDC2_CTX
	{
		long Num;
		unsigned char Data[8];
		DES_cblock H,HH;
		long Pad_Type;
	} MDC2_CTX;
	typedef struct RIPEMD160_CTX
	{
		long A, B, C, D, E;
		long NL, NH;
		long Data[16];
		long Num;
	} RIPEMD160_CTX;
	typedef struct SHA_CTX
	{
		long H0, H1, H2, H3, H4;
		long NL, NH;
		long Data[16];
		long Num;
	} SHA_CTX;
	typedef struct SHA256_CTX
	{
		long H[8];
		long NL, NH;
		long Data[16];
		long Num, MD_Len;
	} SHA256_CTX;
	typedef struct SHA512_CTX
	{
		//long long H[8];
		long H[16];
		//long long NL, NH;
		long NL[2], NH[2];
		//union {
		//	long long D[16];
			unsigned char P[128];
		//} U;
		long Num, MD_Len;
	} SHA512_CTX;
	typedef struct SM3_CTX
	{
		long Total[2];
		long State[8];
		unsigned char Buffer[64];
	} SM3_CTX;

	[
		dllname("r2sapi.dll"),
		helpstring("R2Single API Functions")
	]
	module R2SAPIExports
	{
		[entry("_")]
			long __stdcall R2SAPIVer();
///////////////////////////////////////////
//////// 1. R2Beat PAK文件格式相关
///////////////////////////////////////////
////	westpak模块
		[entry("GetFileFromPakW")]
			long __stdcall GetFileFromPak([in,out]void* pBuf, [in]long ulBufLen, [in,string]LPCWSTR pszFn, [in,string]LPCWSTR pszFnWant);
		[entry("LzssCompress")]
			void __stdcall LzssCompress([in,out]void* pDataBuffer, [in]long ulDataBytes, [in,out]void* pOutputBuffer, [in,out]long* ulOutputBytes);
		[entry("LzssDecompress")]
			void __stdcall LzssDecompress([in,out]void* pDataBuffer, [in]long ulDataBytes, [in,out]void* pOutputBuffer, [in]long ulOutputBytes);
///////////////////////////////////////////
//////// 2. 解析XML
///////////////////////////////////////////
////	xmlparser模块
		[entry("XMLPickAttribW")]
			long __stdcall XMLPickAttribW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickAttrib2W")]
			long __stdcall XMLPickAttrib2W([in,out,string]LPWSTR StrTo, [in]long Size, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickAttribPosW")]
			long __stdcall XMLPickAttribPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickFullTagW")]
			long __stdcall XMLPickFullTagW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickFullTag2W")]
			long __stdcall XMLPickFullTag2W([in,out,string]LPWSTR StrTo, [in]long Size, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickFullTagPosW")]
			long __stdcall XMLPickFullTagPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickTagW")]
			long __stdcall XMLPickTagW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos);
		[entry("XMLPickTag2W")]
			long __stdcall XMLPickTag2W([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickTag3W")]
			long __stdcall XMLPickTag3W([in,out,string]LPWSTR StrTo, [in]long Size, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
		[entry("XMLPickTagPosW")]
			long __stdcall XMLPickTagPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out]long* NextPtr, [in]long Pos);
///////////////////////////////////////////
//////// 3. Hash函数
///////////////////////////////////////////
////	openssl模块
		[entry("MD2")]
			long __stdcall MD2([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD2_Init")]
			long __stdcall MD2_Init([in,out]MD2_CTX* c);
		[entry("MD2_Update")]
			long __stdcall MD2_Update([in,out]MD2_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD2_Final")]
			long __stdcall MD2_Final([in,out]void* pResult, [in,out]MD2_CTX* c);
		[entry("MD4")]
			long __stdcall MD4([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD4_Init")]
			long __stdcall MD4_Init([in,out]MD4_CTX* c);
		[entry("MD4_Update")]
			long __stdcall MD4_Update([in,out]MD4_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD4_Final")]
			long __stdcall MD4_Final([in,out]void* pResult, [in,out]MD4_CTX* c);
		[entry("MD5")]
			long __stdcall MD5([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD5_Init")]
			long __stdcall MD5_Init([in,out]MD5_CTX* c);
		[entry("MD5_Update")]
			long __stdcall MD5_Update([in,out]MD5_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD5_Final")]
			long __stdcall MD5_Final([in,out]void* pResult, [in,out]MD5_CTX* c);
		[entry("MDC2")]
			long __stdcall MDC2([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MDC2_Init")]
			long __stdcall MDC2_Init([in,out]MDC2_CTX* c);
		[entry("MDC2_Update")]
			long __stdcall MDC2_Update([in,out]MDC2_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MDC2_Final")]
			long __stdcall MDC2_Final([in,out]void* pResult, [in,out]MDC2_CTX* c);
		[entry("RIPEMD160")]
			long __stdcall RIPEMD160([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("RIPEMD160_Init")]
			long __stdcall RIPEMD160_Init([in,out]RIPEMD160_CTX* c);
		[entry("RIPEMD160_Update")]
			long __stdcall RIPEMD160_Update([in,out]RIPEMD160_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("RIPEMD160_Final")]
			long __stdcall RIPEMD160_Final([in,out]void* pResult, [in,out]RIPEMD160_CTX* c);
		[entry("SHA1")]
			long __stdcall SHA1([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA1_Init")]
			long __stdcall SHA1_Init([in,out]SHA_CTX* c);
		[entry("SHA1_Update")]
			long __stdcall SHA1_Update([in,out]SHA_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA1_Final")]
			long __stdcall SHA1_Final([in,out]void* pResult, [in,out]SHA_CTX* c);
		[entry("SHA224")]
			long __stdcall SHA224([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA224_Init")]
			long __stdcall SHA224_Init([in,out]SHA256_CTX* c);
		[entry("SHA224_Update")]
			long __stdcall SHA224_Update([in,out]SHA256_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA224_Final")]
			long __stdcall SHA224_Final([in,out]void* pResult, [in,out]SHA256_CTX* c);
		[entry("SHA256")]
			long __stdcall SHA256([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA256_Init")]
			long __stdcall SHA256_Init([in,out]SHA256_CTX* c);
		[entry("SHA256_Update")]
			long __stdcall SHA256_Update([in,out]SHA256_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA256_Final")]
			long __stdcall SHA256_Final([in,out]void* pResult, [in,out]SHA256_CTX* c);
		[entry("SHA384")]
			long __stdcall SHA384([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA384_Init")]
			long __stdcall SHA384_Init([in,out]SHA512_CTX* c);
		[entry("SHA384_Update")]
			long __stdcall SHA384_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA384_Final")]
			long __stdcall SHA384_Final([in,out]void* pResult, [in,out]SHA512_CTX* c);
		[entry("SHA512")]
			long __stdcall SHA512([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512_Init")]
			long __stdcall SHA512_Init([in,out]SHA512_CTX* c);
		[entry("SHA512_Update")]
			long __stdcall SHA512_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA512_Final")]
			long __stdcall SHA512_Final([in,out]void* pResult, [in,out]SHA512_CTX* c);
////	增补NIST Hash函数
		[entry("SHA512_224")]
			long __stdcall SHA512_224([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512_224_Init")]
			long __stdcall SHA512_224_Init([in,out]SHA512_CTX* c);
		[entry("SHA512_224_Update")]
			long __stdcall SHA512_224_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA512_224_Final")]
			long __stdcall SHA512_224_Final([in,out]void* pResult, [in,out]SHA512_CTX* c);
		[entry("SHA512_256")]
			long __stdcall SHA512_256([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512_256_Init")]
			long __stdcall SHA512_256_Init([in,out]SHA512_CTX* c);
		[entry("SHA512_256_Update")]
			long __stdcall SHA512_256_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA512_256_Final")]
			long __stdcall SHA512_256_Final([in,out]void* pResult, [in,out]SHA512_CTX* c);
////	MD6.c
		[entry("MD6")]
			long __stdcall MD6([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD6_Len")]
			long __stdcall MD6_Len([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult, [in]long lResultLen);
		[entry("MD6_Init")]
			long __stdcall MD6_Init([in,out]MD6_CTX* c);
		[entry("MD6_Init_Len")]
			long __stdcall MD6_Init_Len([in,out]MD6_CTX* c, [in]long lResultLen);
		[entry("MD6_Update")]
			long __stdcall MD6_Update([in,out]MD6_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD6_Final")]
			long __stdcall MD6_Final([in,out]void* pResult, [in,out]MD6_CTX* c);
////	BLAKE2模块
		[entry("BLAKE2SP")]
			long __stdcall BLAKE2SP([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("BLAKE2SP_Init")]
			long __stdcall BLAKE2SP_Init([in,out]BLAKE2SP_CTX* c);
		[entry("BLAKE2SP_Update")]
			long __stdcall BLAKE2SP_Update([in,out]BLAKE2SP_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("BLAKE2SP_Final")]
			long __stdcall BLAKE2SP_Final([in,out]void* pResult, [in,out]BLAKE2SP_CTX* c);
////	国密SM3.c
		[entry("SM3")]
			long __stdcall SM3([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SM3_Init")]
			long __stdcall SM3_Init([in,out]SM3_CTX* c);
		[entry("SM3_Update")]
			long __stdcall SM3_Update([in,out]SM3_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SM3_Final")]
			long __stdcall SM3_Final([in,out]void* pResult, [in,out]SM3_CTX* c);
///////////////////////////////////////////
//////// 4. 压缩解压
///////////////////////////////////////////
////	zlib模块
		[entry("compress")]
			long __stdcall Compress([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen);
		[entry("compress2")]
			long __stdcall Compress2([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen, [in]long Level);
		[entry("compressBound")]
			long __stdcall CompressBound([in]long lSrcLen);
		[entry("crc32")]
			long __stdcall CRC32([in]long CRC, [in]void* pBuf, [in]long lBufLen);
		[entry("uncompress")]
			long __stdcall Uncompress([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen);
///////////////////////////////////////////
//////// 5. 字符编码转换
///////////////////////////////////////////
////	UTF.c
		[entry("cpConvertEncoding")]
			long __stdcall cpConvertEncoding([in]long TrCode, [in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("cpTrCodeSupported")]
			long __stdcall cpTrCodeSupported([in]long TrCode);
		[entry("cpMakeTrCode")]
			long __stdcall MakeTrCode([in]short CPFrom, [in]short CPTo);
		[entry("UTF8ToUTF16")]
			long __stdcall UTF8ToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF8ToUTF32")]
			long __stdcall UTF8ToUTF32([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF8")]
			long __stdcall UTF16ToUTF8([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF16BE")]
			long __stdcall UTF16ToUTF16BE([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF32")]
			long __stdcall UTF16ToUTF32([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF32BE")]
			long __stdcall UTF16ToUTF32BE([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16BEToUTF16")]
			long __stdcall UTF16BEToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF8")]
			long __stdcall UTF32ToUTF8([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF16")]
			long __stdcall UTF32ToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF32BE")]
			long __stdcall UTF32ToUTF32BE([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF32BEToUTF16")]
			long __stdcall UTF32BEToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32BEToUTF32")]
			long __stdcall UTF32BEToUTF32([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);

	};

};
