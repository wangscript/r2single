[
	version(1.38),
	uuid(30000000-0000-0313-0000-000000000010),
	helpstring("R2Single API 1.38 Type Library")
]
library R2SAPILib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		helpstring("R2Single API Constants")
	]
	module R2SAPIConstants
	{
		const LPSTR STR_ERROR = "^ERROR";
		const long  XML_ERR_OK = 0;
		const long  XML_ERR_NOTFOUND = -1;
		const long  XML_ERR_BUFFER = -2;
		const long  XML_ERR_INVALID_PARAM = -3;

		const long  Z_OK = 0;
		const long  Z_STREAM_ERROR = -2;
		const long  Z_DATA_ERROR = -3;
		const long  Z_MEM_ERROR = -4;
		const long  Z_BUF_ERROR = -5;
		const long  Z_NO_COMPRESSION = 0;
		const long  Z_BEST_SPEED = 1;
		const long  Z_BEST_COMPRESSION = 9;
		const long  Z_DEFAULT_COMPRESSION = -1;

		const long  cpINVALID = -1;
		const long  cpUTF8 = 1;
		const long  cpUTF16 = 2;
		const long  cpUTF16LE = 2;
		const long  cpUTF16BE = 3;
		const long  cpUTF32 = 4;
		const long  cpUTF32LE = 4;
		const long  cpUTF32BE = 5;
		const long  cpUTFEBCDIC = 0x40;
		const long  cpUTF1 = 0x41;
		const long  cpCESU8 = 0x80;
		const long  cpUTF7 = 0xa0;
		const long  cpGB18030 = 0x100;
	};

	const long MAX_PATH = 260;

	typedef struct Int64
	{
		long Lo, Hi;
	} Int64;
	typedef struct ENUMPAKFILE{
		long Type;
		long Offset;
		long CompressedSize;
		long Size;
		short FileName[MAX_PATH];
	} ENUMPAKFILE;
	typedef struct BLAKE2S_CTX
	{
		unsigned char UBuf[240];
		long Buf;
		long H, T, F;
		long BufLen;
		unsigned char Last_Node;
	} BLAKE2S_CTX;
	typedef struct BLAKE2SP_CTX
	{
		BLAKE2S_CTX S[8];
		BLAKE2S_CTX R;
		unsigned char Buf[512];
		long BufLen;
	} BLAKE2SP_CTX;
	typedef struct MD4_CTX
	{
		long A, B, C, D;
		long NL, NH;
		long Data[16];
		long Num;
	} MD4_CTX;
	typedef struct MD5_CTX
	{
		long A, B, C, D;
		long NL, NH;
		long Data[16];
		long Num;
	} MD5_CTX;
	typedef struct MD6_CTX
	{
		long D;
		long HashBitLen;
		unsigned char HashVal[128];
		unsigned char HexHashVal[129];
		long Initialized;
		long Bits_Processed[2];
		long Compression_Calls[2];
		long Finalized;
		long K[8][2];
		long KeyLen;
		long L;
		long R;
		long Top;
		long B[29][64][2];
		long Bits[29];
		long I_For_Level[29][2];
	} MD6_CTX;
	typedef unsigned char DES_cblock[8];
	typedef struct MDC2_CTX
	{
		long Num;
		unsigned char Data[8];
		DES_cblock H,HH;
		long Pad_Type;
	} MDC2_CTX;
	typedef struct RIPEMD160_CTX
	{
		long A, B, C, D, E;
		long NL, NH;
		long Data[16];
		long Num;
	} RIPEMD160_CTX;
	typedef struct SHA_CTX
	{
		long H0, H1, H2, H3, H4;
		long NL, NH;
		long Data[16];
		long Num;
	} SHA_CTX;
	typedef struct SHA256_CTX
	{
		long H[8];
		long NL, NH;
		long Data[16];
		long Num, MD_Len;
	} SHA256_CTX;
	typedef struct SHA512_CTX
	{
		//long long H[8];
		long H[16];
		//long long NL, NH;
		long NL[2], NH[2];
		//union {
		//	long long D[16];
			unsigned char P[128];
		//} U;
		long Num, MD_Len;
	} SHA512_CTX;
	typedef struct SM3_CTX
	{
		long Total[2];
		long State[8];
		unsigned char Buffer[64];
	} SM3_CTX;
	typedef struct WHIRLPOOL_CTX
	{
		//union	{
		//	unsigned char C[64];
		//	/* double q is here to ensure 64-bit alignment */
			double Q[8];
		//} H;
		unsigned char Data[64];
		long BitOff;
		long BitLen[8];
	} WHIRLPOOL_CTX;

	[
		dllname("r2sapi.dll"),
		helpstring("R2Single API Functions")
	]
	module R2SAPIExports
	{
		[entry("_")]
			long __stdcall R2SAPIVer();
///////////////////////////////////////////
//////// 1. R2Beat PAK文件格式相关
///////////////////////////////////////////
////	westpak模块
		[entry("EnumFileFromPakW")]
			long __stdcall EnumFileFromPak([in,string]LPCWSTR PakFileName, [in]long lpEnumFunc, [in]long Param);
		[entry("GetFileFromPakW")]
			long __stdcall GetFileFromPak([in,out]void* pBuffer, [in]long ulBufLen, [in,string]LPCWSTR PakFileName, [in,string]LPCWSTR FileWant);
		[entry("LzssCompress")]
			void __stdcall LzssCompress([in,out]void* pDataBuffer, [in]long ulDataBytes, [in,out]void* pOutputBuffer, [in,out]long* ulOutputBytes);
		[entry("LzssCompress2")]
			void __stdcall LzssCompress2([in,out]void* pDataBuffer, [in]long ulDataBytes, [in,out]void* pOutputBuffer, [in,out]long* ulOutputBytes, [in]long CompressLevel);
		[entry("LzssDecompress")]
			void __stdcall LzssDecompress([in,out]void* pDataBuffer, [in]long ulDataBytes, [in,out]void* pOutputBuffer, [in]long ulOutputBytes);
///////////////////////////////////////////
//////// 2. 解析XML
///////////////////////////////////////////
////	xmlparser模块
		[entry("XMLPickAttribW")]
			long __stdcall XMLPickAttribW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickAttrib2W")]
			long __stdcall XMLPickAttrib2W([in,out,string]LPWSTR StrTo, [in]long Size, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickAttribPosW")]
			long __stdcall XMLPickAttribPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in]long Pos, [in,string]LPCWSTR Attrib);
		[entry("XMLPickFullTagW")]
			long __stdcall XMLPickFullTagW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out,defaultvalue(0)]long* NextPtr, [in,defaultvalue(1)]long Pos);
		[entry("XMLPickFullTag2W")]
			long __stdcall XMLPickFullTag2W([in,out,string]LPWSTR StrTo, [in]long Size, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out,defaultvalue(0)]long* NextPtr, [in,defaultvalue(1)]long Pos);
		[entry("XMLPickFullTagPosW")]
			long __stdcall XMLPickFullTagPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out,defaultvalue(0)]long* NextPtr, [in,defaultvalue(1)]long Pos);
		[entry("XMLPickTagW")]
			long __stdcall XMLPickTagW([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,defaultvalue(1)]long Pos);
		[entry("XMLPickTag2W")]
			long __stdcall XMLPickTag2W([in,out,string]LPWSTR StrTo, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out,defaultvalue(0)]long* NextPtr, [in,defaultvalue(1)]long Pos);
		[entry("XMLPickTag3W")]
			long __stdcall XMLPickTag3W([in,out,string]LPWSTR StrTo, [in]long Size, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out,defaultvalue(0)]long* NextPtr, [in,defaultvalue(1)]long Pos);
		[entry("XMLPickTagPosW")]
			long __stdcall XMLPickTagPosW([in,out]long* OutPos, [in,out]long* OutLen, [in,string]LPCWSTR StrFrom, [in,string]LPCWSTR Tag, [in,out,defaultvalue(0)]long* NextPtr, [in,defaultvalue(1)]long Pos);
///////////////////////////////////////////
//////// 3. Hash函数
///////////////////////////////////////////
////	openssl模块
		[entry("MD4")]
			long __stdcall MD4([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD4_Init")]
			long __stdcall MD4_Init([in,out]MD4_CTX* c);
		[entry("MD4_Update")]
			long __stdcall MD4_Update([in,out]MD4_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD4_Final")]
			long __stdcall MD4_Final([in,out]MD4_CTX* c, [in,out]void* pResult);
		[entry("MD5")]
			long __stdcall MD5([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD5_Init")]
			long __stdcall MD5_Init([in,out]MD5_CTX* c);
		[entry("MD5_Update")]
			long __stdcall MD5_Update([in,out]MD5_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD5_Final")]
			long __stdcall MD5_Final([in,out]MD5_CTX* c, [in,out]void* pResult);
		[entry("MDC2")]
			long __stdcall MDC2([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MDC2_Init")]
			long __stdcall MDC2_Init([in,out]MDC2_CTX* c);
		[entry("MDC2_Update")]
			long __stdcall MDC2_Update([in,out]MDC2_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MDC2_Final")]
			long __stdcall MDC2_Final([in,out]MDC2_CTX* c, [in,out]void* pResult);
		[entry("RIPEMD160")]
			long __stdcall RIPEMD160([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("RIPEMD160_Init")]
			long __stdcall RIPEMD160_Init([in,out]RIPEMD160_CTX* c);
		[entry("RIPEMD160_Update")]
			long __stdcall RIPEMD160_Update([in,out]RIPEMD160_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("RIPEMD160_Final")]
			long __stdcall RIPEMD160_Final([in,out]RIPEMD160_CTX* c, [in,out]void* pResult);
		[entry("SHA1")]
			long __stdcall SHA1([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA1_Init")]
			long __stdcall SHA1_Init([in,out]SHA_CTX* c);
		[entry("SHA1_Update")]
			long __stdcall SHA1_Update([in,out]SHA_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA1_Final")]
			long __stdcall SHA1_Final([in,out]SHA_CTX* c, [in,out]void* pResult);
		[entry("SHA224")]
			long __stdcall SHA224([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA224_Init")]
			long __stdcall SHA224_Init([in,out]SHA256_CTX* c);
		[entry("SHA224_Update")]
			long __stdcall SHA224_Update([in,out]SHA256_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA224_Final")]
			long __stdcall SHA224_Final([in,out]SHA256_CTX* c, [in,out]void* pResult);
		[entry("SHA256")]
			long __stdcall SHA256([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA256_Init")]
			long __stdcall SHA256_Init([in,out]SHA256_CTX* c);
		[entry("SHA256_Update")]
			long __stdcall SHA256_Update([in,out]SHA256_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA256_Final")]
			long __stdcall SHA256_Final([in,out]SHA256_CTX* c, [in,out]void* pResult);
		[entry("SHA384")]
			long __stdcall SHA384([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA384_Init")]
			long __stdcall SHA384_Init([in,out]SHA512_CTX* c);
		[entry("SHA384_Update")]
			long __stdcall SHA384_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA384_Final")]
			long __stdcall SHA384_Final([in,out]SHA512_CTX* c, [in,out]void* pResult);
		[entry("SHA512")]
			long __stdcall SHA512([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512_Init")]
			long __stdcall SHA512_Init([in,out]SHA512_CTX* c);
		[entry("SHA512_Update")]
			long __stdcall SHA512_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA512_Final")]
			long __stdcall SHA512_Final([in,out]SHA512_CTX* c, [in,out]void* pResult);
		[entry("WHIRLPOOL")]
			long __stdcall WHIRLPOOL([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("WHIRLPOOL_Init")]
			long __stdcall WHIRLPOOL_Init([in,out]WHIRLPOOL_CTX* c);
		[entry("WHIRLPOOL_Update")]
			long __stdcall WHIRLPOOL_Update([in,out]WHIRLPOOL_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("WHIRLPOOL_Final")]
			long __stdcall WHIRLPOOL_Final([in,out]WHIRLPOOL_CTX* c, [in,out]void* pResult);
////	增补NIST Hash函数
		[entry("SHA512_224")]
			long __stdcall SHA512_224([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512_224_Init")]
			long __stdcall SHA512_224_Init([in,out]SHA512_CTX* c);
		[entry("SHA512_224_Update")]
			long __stdcall SHA512_224_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA512_224_Final")]
			long __stdcall SHA512_224_Final([in,out]SHA512_CTX* c, [in,out]void* pResult);
		[entry("SHA512_256")]
			long __stdcall SHA512_256([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SHA512_256_Init")]
			long __stdcall SHA512_256_Init([in,out]SHA512_CTX* c);
		[entry("SHA512_256_Update")]
			long __stdcall SHA512_256_Update([in,out]SHA512_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SHA512_256_Final")]
			long __stdcall SHA512_256_Final([in,out]SHA512_CTX* c, [in,out]void* pResult);
////	MD6.c
		[entry("MD6")]
			long __stdcall MD6([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("MD6_Len")]
			long __stdcall MD6_Len([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult, [in]long lResultLen);
		[entry("MD6_Init")]
			long __stdcall MD6_Init([in,out]MD6_CTX* c);
		[entry("MD6_Init_Len")]
			long __stdcall MD6_Init_Len([in,out]MD6_CTX* c, [in]long lResultLen);
		[entry("MD6_Update")]
			long __stdcall MD6_Update([in,out]MD6_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("MD6_Final")]
			long __stdcall MD6_Final([in,out]MD6_CTX* c, [in,out]void* pResult);
////	BLAKE2模块
		[entry("BLAKE2SP")]
			long __stdcall BLAKE2SP([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("BLAKE2SP_Init")]
			long __stdcall BLAKE2SP_Init([in,out]BLAKE2SP_CTX* c);
		[entry("BLAKE2SP_Update")]
			long __stdcall BLAKE2SP_Update([in,out]BLAKE2SP_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("BLAKE2SP_Final")]
			long __stdcall BLAKE2SP_Final([in,out]BLAKE2SP_CTX* c, [in,out]void* pResult);
////	国密SM3.c
		[entry("SM3")]
			long __stdcall SM3([in]void* pBuffer, [in]long lBufLen, [in,out]void* pResult);
		[entry("SM3_Init")]
			long __stdcall SM3_Init([in,out]SM3_CTX* c);
		[entry("SM3_Update")]
			long __stdcall SM3_Update([in,out]SM3_CTX* c, [in]void* pBuffer, [in]long lBufLen);
		[entry("SM3_Final")]
			long __stdcall SM3_Final([in,out]SM3_CTX* c, [in,out]void* pResult);
///////////////////////////////////////////
//////// 4. 压缩解压
///////////////////////////////////////////
////	zlib模块
		[entry("CRC32")]
			long __stdcall CRC32([in]long CRC, [in]void* pBuf, [in]long lBufLen);
		[entry("CRC32_Combine")]
			long __stdcall CRC32_Combine([in]long CRC1, [in]long CRC2, [in]long Len2);
		[entry("CRC32_Combine64")]
			long __stdcall CRC32_Combine64([in]long CRC1, [in]long CRC2, [in]long Len2Lo, [in]long Len2Hi);
		[entry("ZlibCompress")]
			long __stdcall ZlibCompress([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen);
		[entry("ZlibCompress2")]
			long __stdcall ZlibCompress2([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen, [in]long Level);
		[entry("ZlibCompressBound")]
			long __stdcall ZlibCompressBound([in]long lSrcLen);
		[entry("ZlibUncompress")]
			long __stdcall ZlibUncompress([in,out]void* pDest, [in,out]long* lDestLen, [in]void* pSrc, [in]long lSrcLen);
////	CRC64.c
		[entry("CRC64")]
			Int64 __stdcall CRC64([in]long CRCLo, [in]long CRCHi, [in]void* pBuf, [in]long lBufLenLo, [in]long lBufLenHi);
		[entry("CRC64_Combine")]
			Int64 __stdcall CRC64_Combine([in]long CRC1Lo, [in]long CRC1Hi, [in]long CRC2Lo, [in]long CRC2Hi, [in]long Len2Lo, [in]long Len2Hi);
///////////////////////////////////////////
//////// 5. 字符编码转换
///////////////////////////////////////////
////	UTF.c
		[entry("cpConvertEncoding")]
			long __stdcall cpConvertEncoding([in]long TrCode, [in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("cpTrCodeSupported")]
			long __stdcall cpTrCodeSupported([in]long TrCode);
		[entry("cpMakeTrCode")]
			long __stdcall MakeTrCode([in]short CPFrom, [in]short CPTo);
		[entry("UTF8ToUTF16")]
			long __stdcall UTF8ToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF8ToUTF32")]
			long __stdcall UTF8ToUTF32([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF8")]
			long __stdcall UTF16ToUTF8([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF16BE")]
			long __stdcall UTF16ToUTF16BE([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF32")]
			long __stdcall UTF16ToUTF32([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16ToUTF32BE")]
			long __stdcall UTF16ToUTF32BE([in,string]LPWSTR lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF16BEToUTF16")]
			long __stdcall UTF16BEToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF8")]
			long __stdcall UTF32ToUTF8([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF16")]
			long __stdcall UTF32ToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32ToUTF32BE")]
			long __stdcall UTF32ToUTF32BE([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
		[entry("UTF32BEToUTF16")]
			long __stdcall UTF32BEToUTF16([in]void* lpSrcStr, [in]long cchSrc, [in,out,string]LPWSTR lpDestStr, [in]long cchDest);
		[entry("UTF32BEToUTF32")]
			long __stdcall UTF32BEToUTF32([in]void* lpSrcStr, [in]long cchSrc, [in,out]void* lpDestStr, [in]long cchDest);
///////////////////////////////////////////
//////// 6. 大整数操作辅助函数
///////////////////////////////////////////
////	i4helper.c
		[entry("I4Shl")]
			long __stdcall I4Shl([in]long A, [in]long B);
		[entry("I4Shr")]
			long __stdcall I4Shr([in]long A, [in]long B);
		[entry("I4Rol")]
			long __stdcall I4Rol([in]long A, [in]long B);
		[entry("I4Ror")]
			long __stdcall I4Ror([in]long A, [in]long B);
		[entry("UI4Mul")]
			long __stdcall UI4Mul([in]long A, [in]long B);
		[entry("UI4Div")]
			long __stdcall UI4Div([in]long A, [in]long B);
		[entry("UI4Mod")]
			long __stdcall UI4Mod([in]long A, [in]long B);
		[entry("UI4Shl")]
			long __stdcall UI4Shl([in]long A, [in]long B);
		[entry("UI4Shr")]
			long __stdcall UI4Shr([in]long A, [in]long B);
		[entry("UI4Cmp")]
			long __stdcall UI4Cmp([in]long A, [in]long B);
////	i8helper.c
		[entry("I8Add")]
			Int64 __stdcall I8Add4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Sub")]
			Int64 __stdcall I8Sub4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Mul")]
			Int64 __stdcall I8Mul4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Div")]
			Int64 __stdcall I8Div4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Mod")]
			Int64 __stdcall I8Mod4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8And")]
			Int64 __stdcall I8And4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Or")]
			Int64 __stdcall I8Or4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Xor")]
			Int64 __stdcall I8Xor4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8Not")]
			Int64 __stdcall I8Not4([in]long ALo, [in]long AHi);
		[entry("I8Shl")]
			Int64 __stdcall I8Shl4([in]long ALo, [in]long AHi, [in]long B);
		[entry("I8Shr")]
			Int64 __stdcall I8Shr4([in]long ALo, [in]long AHi, [in]long B);
		[entry("I8Rol")]
			Int64 __stdcall I8Rol4([in]long ALo, [in]long AHi, [in]long B);
		[entry("I8Ror")]
			Int64 __stdcall I8Ror4([in]long ALo, [in]long AHi, [in]long B);
		[entry("I8Cmp")]
			long __stdcall I8Cmp4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("UI8Mul")]
			Int64 __stdcall UI8Mul4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("UI8Div")]
			Int64 __stdcall UI8Div4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("UI8Mod")]
			Int64 __stdcall UI8Mod4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("UI8Shl")]
			Int64 __stdcall UI8Shl4([in]long ALo, [in]long AHi, [in]long B);
		[entry("UI8Shr")]
			Int64 __stdcall UI8Shr4([in]long ALo, [in]long AHi, [in]long B);
		[entry("UI8Cmp")]
			long __stdcall UI8Cmp4([in]long ALo, [in]long AHi, [in]long BLo, [in]long BHi);
		[entry("I8AddR")]
			Int64 __stdcall I8Add([in]Int64* A, [in]Int64* B);
		[entry("I8SubR")]
			Int64 __stdcall I8Sub([in]Int64* A, [in]Int64* B);
		[entry("I8MulR")]
			Int64 __stdcall I8Mul([in]Int64* A, [in]Int64* B);
		[entry("I8DivR")]
			Int64 __stdcall I8Div([in]Int64* A, [in]Int64* B);
		[entry("I8ModR")]
			Int64 __stdcall I8Mod([in]Int64* A, [in]Int64* B);
		[entry("I8AndR")]
			Int64 __stdcall I8And([in]Int64* A, [in]Int64* B);
		[entry("I8OrR")]
			Int64 __stdcall I8Or([in]Int64* A, [in]Int64* B);
		[entry("I8XorR")]
			Int64 __stdcall I8Xor([in]Int64* A, [in]Int64* B);
		[entry("I8NotR")]
			Int64 __stdcall I8Not([in]Int64* A);
		[entry("I8ShlR")]
			Int64 __stdcall I8Shl([in]Int64* A, [in]long B);
		[entry("I8ShrR")]
			Int64 __stdcall I8Shr([in]Int64* A, [in]long B);
		[entry("I8RolR")]
			Int64 __stdcall I8Rol([in]Int64* A, [in]long B);
		[entry("I8RorR")]
			Int64 __stdcall I8Ror([in]Int64* A, [in]long B);
		[entry("I8CmpR")]
			long __stdcall I8Cmp([in]Int64* A, [in]Int64* B);
		[entry("UI8MulR")]
			Int64 __stdcall UI8Mul([in]Int64* A, [in]Int64* B);
		[entry("UI8DivR")]
			Int64 __stdcall UI8Div([in]Int64* A, [in]Int64* B);
		[entry("UI8ModR")]
			Int64 __stdcall UI8Mod([in]Int64* A, [in]Int64* B);
		[entry("UI8ShlR")]
			Int64 __stdcall UI8Shl([in]Int64* A, [in]long B);
		[entry("UI8ShrR")]
			Int64 __stdcall UI8Shr([in]Int64* A, [in]long B);
		[entry("UI8CmpR")]
			long __stdcall UI8Cmp([in]Int64* A, [in]Int64* B);
////	i8conv.c
		[entry("I8R8")]
			double __stdcall I8R84([in]long ALo, [in]long AHi);
		[entry("UI8R8")]
			double __stdcall UI8R84([in]long ALo, [in]long AHi);
		[entry("R8I8")]
			Int64 __stdcall R8I8([in]double A);
		[entry("R8UI8")]
			Int64 __stdcall R8UI8([in]double A);
		[entry("I8Bstr")]
			BSTR __stdcall I8Str4([in]long ALo, [in]long AHi);
		[entry("UI8Bstr")]
			BSTR __stdcall UI8Str4([in]long ALo, [in]long AHi);
		[entry("I8BstrHex")]
			BSTR __stdcall I8Hex4([in]long ALo, [in]long AHi);
		[entry("I8BstrOct")]
			BSTR __stdcall I8Oct4([in]long ALo, [in]long AHi);
		[entry("BstrI8")]
			Int64 __stdcall StrI8([in]BSTR A);
		[entry("BstrUI8")]
			Int64 __stdcall StrUI8([in]BSTR A);
		[entry("I8R8R")]
			double __stdcall I8R8([in]Int64* A);
		[entry("UI8R8R")]
			double __stdcall UI8R8([in]Int64* A);
		[entry("I8BstrR")]
			BSTR __stdcall I8Str([in]Int64* A);
		[entry("UI8BstrR")]
			BSTR __stdcall UI8Str([in]Int64* A);
		[entry("I8BstrHexR")]
			BSTR __stdcall I8Hex([in]Int64* A);
		[entry("I8BstrOctR")]
			BSTR __stdcall I8Oct([in]Int64* A);

	};

};
